?inverse.rle
?cacheMethod
cachematrix.R
data(cachematrix)
}
source('~/Desktop/ProgrammingAssignment2/cachematrix.R')
get <- function() x
source('~/Desktop/ProgrammingAssignment2/cachematrix.R')
message("getting cached data")
i <- x$getinverse()
message("getting cached data")
cachematrix(r)
setinverse = setinverse,
source('~/Desktop/ProgrammingAssignment2/cachematrix.R')
setinverse = setinverse,
source('~/Desktop/ProgrammingAssignment2/cachematrix.R')
getinverse = getinverse)
getinverse = getinverse)
}
## Write a short comment describing this function
## his function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
source('~/Desktop/ProgrammingAssignment2/cachematrix.R')
## This function creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
i
source('~/Desktop/ProgrammingAssignment2/cachematrix.R')
a <- diag(5,3)
a
CachedMatrix <- makeCacheMatrix(a)
cacheSolve(CachedMatrix)
b <- diag(2,6)
b
CachedMarix <- makeCacheMatrix(b)
cacheSolve(CachedMarix)
cacheSolve(CachedMarix)
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getinverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getinverse()
